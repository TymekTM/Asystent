[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"



[tool.poetry]
name = "gaja-assistant"
version = "0.1.0"
description = "AI-powered personal assistant with voice recognition and control"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [
    { include = "gaja_server", from = "src" },
    { include = "gaja_client", from = "src" },
    { include = "gaja_core", from = "src" },
]

[tool.poetry.dependencies]
python = ">=3.11"
# Core dependencies
flask = "3.1.0"
flask-httpauth = "4.8.0"
flask-limiter = "3.12"
werkzeug = ">=3.1"

# FastAPI and ASGI server
fastapi = "0.104.1"
uvicorn = {extras = ["standard"], version = "0.24.0"}

# AI and ML
openai = "1.70.0"
anthropic = "0.49.0"
deepseek = "1.0.0"
numpy = "2.1.2"
huggingface-hub = "0.30.2"
scikit-learn = "1.5.1"

# Audio processing
sounddevice = "0.4.6"
faster-whisper = "1.1.1"
edge-tts = "7.0.0"
piper = "0.14.4"
piper-phonemize-fix = "1.2.1"
openwakeword = "0.6.0"
av = "14.3.0"

# HTTP and API
aiohttp = "3.11.16"
requests = "2.31.0"
httpx = "0.27.2"
websockets = "12.0"
python-multipart = "0.0.6"
pydantic = "2.5.0"

# Data handling
pandas = "2.2.3"
pillow = "11.0.0"
sqlalchemy = "2.0.23"
alembic = "1.12.1"

# Web scraping
beautifulsoup4 = "4.13.3"
duckduckgo_search = "8.0.0"

# Security and environment
python-dotenv = "1.0.1"
cryptography = ">=41.0.0"
bcrypt = ">=4.0.0"
python-jose = {extras = ["cryptography"], version = "3.3.0"}
passlib = {extras = ["bcrypt"], version = "1.7.4"}

# Utilities
coloredlogs = "15.0.1"
markdown = "3.8"
jinja2 = "3.1.6"
logmuse = "0.2.8"
colorama = "0.4.6"
gunicorn = "23.0.0"
langid = "1.1.6"
psutil = ">=5.9.0"
watchdog = "3.0.0"
schedule = "1.2.0"
loguru = "0.7.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
black = "^23.0.0"
ruff = "^0.1.0"
# mypy = "^1.5.0"  # Temporary disabled for Python 3.13
pre-commit = "^3.4.0"
# docformatter = "^1.7.0"  # Temporary disabled for Python 3.13

[tool.poetry.group.build.dependencies]
# pyinstaller = "^5.13.0"  # Uncomment when Python 3.13 support is added
# auto-py-to-exe = "^2.40.0"  # Depends on pyinstaller

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "faster_whisper.*",
    "edge_tts.*",
    "piper.*",
    "openwakeword.*",
    "sounddevice.*",
    "av.*",
    "coloredlogs.*",
    "logmuse.*",
    "duckduckgo_search.*",
    "langid.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=src --cov-report=term-missing --cov-report=html"
testpaths = [
    "tests",
    "tests_pytest",
    "tests_unit",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
