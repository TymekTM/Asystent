# Multi-stage build for optimization
FROM python:3.11-slim as base

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install only essential system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create app user for security
RUN useradd --create-home --shell /bin/bash app

# Builder stage
FROM base as builder

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements_server_minimal.txt /tmp/requirements.txt
RUN pip install --user --no-warn-script-location -r /tmp/requirements.txt

# Runtime stage
FROM base as runtime

# Copy Python packages from builder
COPY --from=builder /root/.local /home/app/.local

# Set working directory
WORKDIR /app

# Copy only necessary application files
COPY server/ ./server/
COPY server_main.py ./
COPY config.json ./
COPY dummy_config.json ./

# Create necessary directories with minimal structure
RUN mkdir -p logs databases data/cache data/logs \
    && chown -R app:app /app

# Switch to non-root user
USER app

# Add local bin to PATH
ENV PATH=/home/app/.local/bin:$PATH
ENV PYTHONPATH=/app

# Expose port
EXPOSE 8000

# Health check (simplified)
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=2 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start server
CMD ["python", "server_main.py"]
