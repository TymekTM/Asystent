services:
  # ==============================================================================
  # Gaja Server (CPU variant) - Production ready with resource management
  # ==============================================================================
  gaja-server-cpu:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: cpu
    container_name: gaja-server-cpu
    ports:
      - "8001:8001"  # API server
      - "8080:8080"  # Web UI
    volumes:
      # Data persistence
      - ./data:/app/data
      - ./config:/app/config
      - gaja-cache:/app/.cache
      - gaja-models:/app/.hf_cache
      - gaja-torch:/app/.torch_cache
      # Log management
      - gaja-logs:/var/log/gaja
      # Configuration
      - ./docker/supervisor.conf:/etc/supervisor/conf.d/gaja.conf:ro
      - ./docker/logrotate.conf:/etc/logrotate.d/gaja:ro
    environment:
      # Core settings
      - GAJA_MODE=server
      - GAJA_LOG_LEVEL=${GAJA_LOG_LEVEL:-INFO}
      - GAJA_HOST=0.0.0.0
      - GAJA_PORT=8001
      - GAJA_DATA_DIR=/app/data
      - GAJA_CACHE_DIR=/app/.cache
      # Resource management
      - MALLOC_ARENA_MAX=2
      - MALLOC_MMAP_THRESHOLD_=1048576
      - MALLOC_TRIM_THRESHOLD_=1048576
      # AI Provider settings
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      # Security
      - GAJA_SECRET_KEY=${GAJA_SECRET_KEY:-dev-secret-change-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/server_data.db}
      # Monitoring
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_RETENTION_DAYS=${METRICS_RETENTION_DAYS:-7}
    restart: unless-stopped
    # Resource limits for CPU variant
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    # Comprehensive health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - cpu
      - default
    networks:
      - gaja-network
  # ==============================================================================
  # Gaja Server (GPU variant) - Production ready with GPU acceleration
  # ==============================================================================
  gaja-server-gpu:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: gpu
    container_name: gaja-server-gpu
    ports:
      - "8001:8001"  # API server
      - "8080:8080"  # Web UI
    volumes:
      # Data persistence
      - ./data:/app/data
      - ./config:/app/config
      - gaja-cache:/app/.cache
      - gaja-models:/app/.hf_cache
      - gaja-torch:/app/.torch_cache
      # Log management
      - gaja-logs:/var/log/gaja
      # Configuration
      - ./docker/supervisor.conf:/etc/supervisor/conf.d/gaja.conf:ro
      - ./docker/logrotate.conf:/etc/logrotate.d/gaja:ro
    environment:
      # Core settings
      - GAJA_MODE=server
      - GAJA_LOG_LEVEL=${GAJA_LOG_LEVEL:-INFO}
      - GAJA_HOST=0.0.0.0
      - GAJA_PORT=8001
      - GAJA_DATA_DIR=/app/data
      - GAJA_CACHE_DIR=/app/.cache
      # Resource management
      - MALLOC_ARENA_MAX=2
      - MALLOC_MMAP_THRESHOLD_=1048576
      - MALLOC_TRIM_THRESHOLD_=1048576
      # GPU settings
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=all
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
      # AI Provider settings
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      # Security
      - GAJA_SECRET_KEY=${GAJA_SECRET_KEY:-dev-secret-change-in-production}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8080}
      # Database
      - DATABASE_URL=${DATABASE_URL:-sqlite:///./data/server_data.db}
      # Monitoring
      - ENABLE_METRICS=${ENABLE_METRICS:-true}
      - METRICS_RETENTION_DAYS=${METRICS_RETENTION_DAYS:-7}
    # GPU resource management
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '2.0'
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    # Enhanced health check with GPU monitoring
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:8001/health && nvidia-smi > /dev/null"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - gpu
    networks:
      - gaja-network

  # ==============================================================================
  # Database (PostgreSQL for production with comprehensive setup)
  # ==============================================================================
  database:
    image: postgres:15-alpine
    container_name: gaja-database
    environment:
      - POSTGRES_DB=${DB_NAME:-gaja}
      - POSTGRES_USER=${DB_USER:-gaja}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-gaja-dev-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    # Resource management for database
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-gaja} -d ${DB_NAME:-gaja}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "3"
    profiles:
      - production
      - full
    networks:
      - gaja-network
  # ==============================================================================
  # Redis (for caching and session management with resource management)
  # ==============================================================================
  redis:
    image: redis:7-alpine
    container_name: gaja-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
      - ./docker/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    # Resource management for Redis
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-gaja-dev-redis}
      - REDIS_MAXMEMORY=${REDIS_MAXMEMORY:-1gb}
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "3"
    profiles:
      - production
      - full
    networks:
      - gaja-network

  # ==============================================================================
  # Nginx (reverse proxy with advanced configuration)
  # ==============================================================================
  nginx:
    image: nginx:alpine
    container_name: gaja-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./web_ui/dist:/usr/share/nginx/html:ro
      - nginx-logs:/var/log/nginx
      - nginx-cache:/var/cache/nginx
      - ./ssl:/etc/nginx/ssl:ro  # SSL certificates
    depends_on:
      - gaja-server-cpu
    restart: unless-stopped
    # Resource management for Nginx
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 128M
    environment:
      - NGINX_WORKER_PROCESSES=${NGINX_WORKER_PROCESSES:-auto}
      - NGINX_WORKER_CONNECTIONS=${NGINX_WORKER_CONNECTIONS:-1024}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    # Logging configuration
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    profiles:
      - production
      - full
    networks:
      - gaja-network

  # ==============================================================================
  # Development environment with full debugging capabilities
  # ==============================================================================
  gaja-dev:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: development
    container_name: gaja-dev
    ports:
      - "${DEV_API_PORT:-8001}:8001"
      - "${DEV_WEB_PORT:-8080}:8080"
      - "${DEV_DEBUG_PORT:-5678}:5678"  # Debug port
    volumes:
      # Source code mounting for live development
      - .:/app
      - gaja-cache:/app/.cache
      - gaja-models:/app/.hf_cache
      - gaja-torch:/app/.torch_cache
      - gaja-logs:/var/log/gaja
      # Development tools
      - ~/.ssh:/home/app/.ssh:ro
      - ~/.gitconfig:/home/app/.gitconfig:ro
    environment:
      # Development settings
      - GAJA_MODE=development
      - GAJA_LOG_LEVEL=DEBUG
      - GAJA_HOST=0.0.0.0
      - GAJA_PORT=8001
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      # AI Provider settings
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - GROQ_API_KEY=${GROQ_API_KEY:-}
      # Development optimizations
      - PYTHONPATH=/app:/app/server:/app/client
      - WATCHDOG_ENABLED=true
    # Development resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    restart: unless-stopped
    # Development health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    profiles:
      - development
    networks:
      - gaja-network

# ==============================================================================
# Volumes with proper configuration for data persistence
# ==============================================================================
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  gaja-cache:
    driver: local
  gaja-models:
    driver: local
  gaja-torch:
    driver: local
  gaja-logs:
    driver: local
  nginx-logs:
    driver: local
  nginx-cache:
    driver: local

# ==============================================================================
# Networks for service isolation and security
# ==============================================================================
networks:
  gaja-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: gaja-bridge
